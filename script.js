// Function to fetch JSON data from a given URL
async function getData(url) {
  const gearSlots = await fetch(url); // Fetch data from the URL
  return await gearSlots.json(); // Parse and return JSON data
}

// Fetch gear slot and gear data from local JSON files
// Currently getting dummy data generated by ChatGPT, can eventually be replaced with an actual API.
const gearSlotData = await getData('./json/gearSlots.json'); // Fetch gear slots
const gearData = await getData('./json/gear.json'); // Fetch gear information

// Appends a gear slot icon to the UI
function appendGearSlot(gearSlot) {
  // Create an image node for the gear slot icon
  const gearSlotIcon = createNode(
    'img',
    `images/${gearSlot.slot}_slot.webp`, // Path to gear slot icon image
    'gear-slot-container' // CSS class for styling
  );

  // Select the container for displaying all gear slot icons
  const parent = document.querySelector('#gear-list-container');

  // Add click event listener to handle showing possible gear items for the slot
  gearSlotIcon.addEventListener('click', (event) => {
    appendPossibleGear(gearData.equipment, gearSlot); // Show gear items for the clicked slot
  });

  // Append the gear slot icon to the UI
  parent.appendChild(gearSlotIcon);
}

// Appends a list of possible gear items for the selected gear slot
function appendPossibleGear(gearArray, currentGearSlot) {
  const parent = document.querySelector('#stats-container'); // Container for gear details
  parent.innerHTML = ''; // Clear previous gear details

  // Filter gear items that match the current gear slot type
  const possibleGear = gearArray.filter((gearPiece) => {
    return gearPiece.type === currentGearSlot.slot; // Return true if gear type matches slot
  });

  // Iterate through each matching gear piece and display it
  possibleGear.forEach((gearPiece) => {
    console.log(gearPiece); // Log gear piece to the console for debugging

    // Create a container for the gear piece
    const possibleGearContainer = createNode('div', null, 'gear-container');
    // Add HTML for displaying gear details (name, rarity, stats)
    possibleGearContainer.innerHTML = `
      <div class="flex-row">
          <div class="gear-icon-placeholder"></div> <!-- Placeholder for gear icon -->
          <h3>${gearPiece.name}</h3> <!-- Gear name -->
      </div>
      <div class="flex-column">
          <h3>${gearPiece.rarity}</h4> <!-- Gear rarity -->
          <h4>Armor: ${gearPiece.stats.armor}</h4> <!-- Gear armor stat -->
          <h4>Durability: ${gearPiece.stats.durability}</h4> <!-- Gear durability stat -->
      </div>
      `;

    // Append the gear piece details to the parent container
    parent.appendChild(possibleGearContainer);
  });
}

// Loop through each gear slot and append it to the UI
gearSlotData.characterGearSlots.forEach((gearSlot) => {
  appendGearSlot(gearSlot);
});

// Helper function to create a new DOM node
// Example usage: createNode("div", "text-to-be-displayed", "container-class")
function createNode(type, content, className) {
  const node = document.createElement(type); // Create the specified node type (e.g., div, img)

  // Add CSS class to the node
  node.classList.add(className);

  // Handle specific behavior for images
  if (type === 'img') {
    node.src = content; // Set the image source
  } else if (content === null) {
    node.textContent = ''; // Set empty text content for non-image nodes without content
  } else {
    node.textContent = content; // Set text content for the node
  }

  return node; // Return the created node
}
